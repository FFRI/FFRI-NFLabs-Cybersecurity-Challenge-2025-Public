use std::io::{Read, Write};
use std::mem::MaybeUninit;
use std::net::{TcpListener, TcpStream};

#[inline(never)]
unsafe fn func(mut stream: TcpStream) -> std::io::Result<()> {
    macro_rules! write_stream {
        ($s:expr) => {
            stream.write_all($s.as_bytes())?;
            stream.flush()?;
        };
    }
    unsafe {
        let name: MaybeUninit<[u8; 0x30]> = MaybeUninit::uninit();
        let mut name = name.assume_init();
        write_stream!("name: ");

        let mut s = vec![0; 0x80];
        let rb = stream.read(&mut s)?;
        std::ptr::copy_nonoverlapping(s.as_ptr(), name.as_mut_ptr(), rb);

        write_stream!(format!("Hello {}!\n", str::from_utf8_unchecked(&name)));
        Ok(())
    }
}

fn main() {
    let listener = TcpListener::bind("0.0.0.0:8109").unwrap();
    println!("Super TCP Echo Server! Bind 0.0.0.0:8109");

    loop {
        let (stream, _) = listener.accept().unwrap();
        unsafe {
            func(stream).unwrap();
        }
    }
}
