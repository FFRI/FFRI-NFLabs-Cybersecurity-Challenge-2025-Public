#!/usr/bin/env python3
# pip3 install pycryptodome
from Crypto.Cipher import PKCS1_OAEP, AES
from Crypto.PublicKey import RSA
from Crypto.Hash import SHA1
from Crypto.Util.Padding import unpad
import io

with open("CustomEncryptor.PublicKey", "rb") as f:
    private_key_blob = f.read()
    assert private_key_blob[:0x10] == bytes.fromhex("07 02 00 00 00 a4 00 00  52 53 41 32 00 08 00 00")
    assert len(private_key_blob) == 0x494

with open("secret.iso.encrypted", "rb") as f:
    f.seek(0, io.SEEK_END)
    encrypted_filesize = f.tell()
    f.seek(0, io.SEEK_SET)
    encrypted_content = f.read(encrypted_filesize - 256)
    encrypted_footer = f.read(256)

rsa_n = int.from_bytes(private_key_blob[0x14:0x114], "little")
rsa_e = int.from_bytes(private_key_blob[0x10:0x14], "little")
rsa_d = int.from_bytes(private_key_blob[0x394:0x494], "little")
# dnSpyExでの動的解析で調査した値と同一であることを検証
assert rsa_n == 24087817301548667964381398099593599221053612911973308458717128452386965238770910309994101083064317450907525029532615056522888535655860543576131466970519533175472020827481499401766865879604472872135756968332012548974307228639808781009978454836733275972648755106491385501876647448763103809880555873764851146477139771084863155349593597367417466002861653709995127197897954371829896951827257025891170595247194375876905220395973287516361021998112038143310568493600606448253233787322615516229246291571457389721908134293007113155041597196260394447102318605402414142863968098753166299628927577492790745340335086722758336258161
assert rsa_e == 65537
assert rsa_d == 9404381971935330686553043825233096163527454622254009849904560259261566436736977312080489866981501909095180477144987128663978347526229515059927611049860129321769421806197554437844405408569810143572907114282179609847957627892744362416685516943215196489191810685716390448701005207310397747584017930970615778642638843238175151908657160900844868809524475372772208690894084116446881240072473824937972546162267853868733787180326648297556403777496866517104638157717459516703589277906898005520851633073817019803539165243646030093027629837548177716712277197626148501011965113928724898905028411631570692934565651314986329307245

rsa_key = RSA.construct([rsa_n, rsa_e, rsa_d])
rsa_cipher = PKCS1_OAEP.new(rsa_key, hashAlgo=SHA1)
decrypted_footer = rsa_cipher.decrypt(encrypted_footer)
assert len(decrypted_footer) == 64
assert decrypted_footer[48:] == b"TheFooterContent"

aes_key = decrypted_footer[:32]
aes_iv = decrypted_footer[32:48]
aes_cipher = AES.new(aes_key, AES.MODE_CBC, aes_iv)
decrypted_content = unpad(aes_cipher.decrypt(encrypted_content), AES.block_size, style='pkcs7')
with open("secret.iso", "wb") as f:
    f.write(decrypted_content)
